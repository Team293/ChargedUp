// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.classes.SPIKE293Utils;
import frc.robot.subsystems.Drivetrain;
import static frc.robot.Constants.DriveConstants.*;

/**
 *
 */
public class ArcadeDrive extends CommandBase {
    public static final boolean DEFAULT_FORZA_MODE = true;

    private final Drivetrain m_drivetrain;
    private final XboxController m_xboxcontroller;

    private double m_arcadeDeadband;
    private double m_velocityLimitPercentage;
    private double m_turningLimitPercentage;

    public ArcadeDrive(Drivetrain subsystem, XboxController xboxcontroller) {
        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);
        m_xboxcontroller = xboxcontroller;

        m_velocityLimitPercentage = DEFAULT_MAX_VELOCITY_PERCENTAGE;
        m_turningLimitPercentage = DEFAULT_MAX_TURNING_SPEED;
        m_arcadeDeadband = DEFAULT_ARCADE_JOY_DEADBAND;
        SmartDashboard.putNumber("Arcade Joy Deadband", m_arcadeDeadband);
        SmartDashboard.putNumber("Max Velocity Percentage", m_velocityLimitPercentage);
        SmartDashboard.putNumber("Max Turning Percentage", m_turningLimitPercentage);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double turning;
        double speed;

        // Get deadband value set in SmartDashboard
        m_arcadeDeadband = SmartDashboard.getNumber("Arcade Joy Deadband", DEFAULT_ARCADE_JOY_DEADBAND);
        m_arcadeDeadband = MathUtil.clamp(m_arcadeDeadband, 0.0d, 1.0d);

        m_velocityLimitPercentage = SmartDashboard.getNumber("Max Velocity Percentage",
                DEFAULT_MAX_VELOCITY_PERCENTAGE);
        m_velocityLimitPercentage = MathUtil.clamp(m_velocityLimitPercentage, 0.0d, 1.0d);
        SmartDashboard.putNumber("Max Velocity Percentage", m_velocityLimitPercentage);

        m_turningLimitPercentage = SmartDashboard.getNumber("Max Turning Percentage", DEFAULT_MAX_TURNING_SPEED);
        m_turningLimitPercentage = MathUtil.clamp(m_turningLimitPercentage, 0.0d, 1.0d);
        SmartDashboard.putNumber("Max Turning Percentage", m_turningLimitPercentage);

        // Get turning. Note that the controls are inverted!
        turning = m_xboxcontroller.getLeftX();

        // Checks if joystick value is higher or lower than deadband value
        turning = SPIKE293Utils.applyDeadband(turning, m_arcadeDeadband);

        speed = -m_xboxcontroller.getLeftY();
        speed = SPIKE293Utils.applyDeadband(speed, m_arcadeDeadband);

        // Clamp input to verify they are valid and greater than the deadband
        turning = MathUtil.clamp(turning, -1.0d, 1.0d);
        speed = MathUtil.clamp(speed, -1.0d, 1.0d);

        // Apply limiting percentage
        turning *= m_turningLimitPercentage;
        speed *= m_velocityLimitPercentage;
        m_drivetrain.arcadeDrive(0, turning);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivetrain.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
