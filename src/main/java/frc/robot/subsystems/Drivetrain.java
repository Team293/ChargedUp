// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.InvertType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.classes.Kinematics;
import frc.robot.classes.Position2D;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.wpilibj.SerialPort;
import frc.robot.classes.spikemotor.*;

import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Optional;

import org.littletonrobotics.junction.Logger;

public class Drivetrain extends SubsystemBase {
    private SpikeMotor leftTalonLead;
    private SpikeMotor rightTalonLead;
    private SpikeMotor leftTalonFollower;
    private SpikeMotor rightTalonFollower;
    private AHRS navX;
    private Kinematics m_kinematics;

    public static final double VELOCITY_KF = 0.046d;
    public static final double VELOCITY_KP = 0.03d;
    public static final double VELOCITY_KD = 0.06d;
    public static final double POSITION_KF = 0.0d;
    public static final double POSITION_KP = 0.029d;
    public static final double POSITION_KI = 0.0004d;
    public static final double VELOCITY_KI = 0.0d;
    public static final double POSITION_KD = 0.29d;
    public static final double CLOSED_LOOP_RAMP = 0.5;
    public static final int LEFT_LEAD_TALON_CAN_ID = 1;
    public static final int LEFT_FOLLOWER_TALON_CAN_ID = 3;
    public static final int RIGHT_LEAD_TALON_CAN_ID = 0;
    public static final int RIGHT_FOLLOWER_TALON_CAN_ID = 2;
    public static final int VELOCITY_PID_SLOT_ID = 0;
    public static final double MOTOR_NEUTRAL_DEADBAND = 0.001d;
    public static final int POSITION_PID_SLOT_ID = 1;
    public static final int PID_CONFIG_TIMEOUT_MS = 10;
    public static final int CONFIG_FEEDBACKSENSOR_TIMEOUT_MS = 4000;
    public static final double WHEEL_CIRCUMFERENCE_FEET = (4.0d / 12.0d) * Math.PI;
    public static final double GEARBOX_RATIO = 9.52d;
    public static final double MAX_ACCEL = 1.0;
    public static final double PERCENT_DRIVE_MAX_SPEED = 10.8;
    public static final double MAX_VELOCITY = 1;

    public static final boolean USE_NAVX_HEADING = false;

    public static final double TRACK_WIDTH_FEET = 27.5d / 12.0d; // Track width is 27.5 inches

    public Drivetrain(Kinematics kinematics) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new SpikeMotorTalonFX(GEARBOX_RATIO * WHEEL_CIRCUMFERENCE_FEET, false);
        rightTalonLead = new SpikeMotorTalonFX(GEARBOX_RATIO * WHEEL_CIRCUMFERENCE_FEET, true);
        leftTalonFollower = new SpikeMotorTalonFX(GEARBOX_RATIO * WHEEL_CIRCUMFERENCE_FEET, InvertType.FollowMaster);
        rightTalonFollower = new SpikeMotorTalonFX(GEARBOX_RATIO * WHEEL_CIRCUMFERENCE_FEET, InvertType.FollowMaster);

        leftTalonLead.init(LEFT_LEAD_TALON_CAN_ID);
        rightTalonLead.init(RIGHT_LEAD_TALON_CAN_ID);
        leftTalonFollower.init(LEFT_FOLLOWER_TALON_CAN_ID);
        rightTalonFollower.init(RIGHT_FOLLOWER_TALON_CAN_ID);

        // VELOCITY PIDS
        leftTalonLead.setPid(VELOCITY_PID_SLOT_ID, VELOCITY_KP, VELOCITY_KI, VELOCITY_KD, VELOCITY_KF,
                Optional.empty());
        leftTalonLead.setClosedLoopRamp(CLOSED_LOOP_RAMP);
        leftTalonLead.setOpenLoopRamp(0.2);

        rightTalonLead.setPid(VELOCITY_PID_SLOT_ID, VELOCITY_KP, VELOCITY_KI, VELOCITY_KD, VELOCITY_KF,
                Optional.empty());
        rightTalonLead.setClosedLoopRamp(CLOSED_LOOP_RAMP);
        rightTalonLead.setOpenLoopRamp(0.2);

        // POSITIONAL PIDS
        leftTalonLead.setPid(POSITION_PID_SLOT_ID, POSITION_KP, POSITION_KI, POSITION_KD, POSITION_KF,
                Optional.of(1000.0));
        rightTalonLead.setPid(POSITION_PID_SLOT_ID, POSITION_KP, POSITION_KI, POSITION_KD, POSITION_KF,
                Optional.of(1000.0));

        navX = new AHRS(SerialPort.Port.kMXP);

        m_kinematics = kinematics;

        leftTalonFollower.follow(leftTalonLead);
        rightTalonFollower.follow(rightTalonLead);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // Put code here to be run every loop
        // Run Kinematics
        if (USE_NAVX_HEADING) {
            // use the NAVX for heading
            double headingInRadians = Math.toRadians(getGyroHeadingDegrees());
            m_kinematics.calculatePosition(getLeftEncoderPosition(), getRightEncoderPosition(), headingInRadians);
        } else {
            // Use the encoder information for heading
            m_kinematics.calculatePosition(getLeftEncoderPosition(), getRightEncoderPosition());
        }

        // Get current pose from Kinematics
        Position2D currentPose = m_kinematics.getPose();

        // Log Position w/ Pose2d class
        Pose2d currentPose2d = new Pose2d(currentPose.getX(), currentPose.getY(),
                Rotation2d.fromDegrees(currentPose.getHeadingDegrees()));
        Logger.getInstance().recordOutput("odometry", currentPose2d);

        // Push robot info to Dashboard
        SmartDashboard.putNumber("Kinematics X (Feet)", currentPose.getX());
        SmartDashboard.putNumber("Kinematics Y (Feet)", currentPose.getY());
        SmartDashboard.putNumber("Kinematics Heading (degrees)", currentPose.getHeadingDegrees());

        Hashtable<String, Double> doubleVals = new Hashtable<String, Double>() {
            {
                put("Left Encoder Velocity (Ft per S)", getLeftEncoderVelocity());
                put("Left Encoder Position (Ft)", getLeftEncoderPosition());
                put("Right Encoder Veloctiy (Ft per S)", getRightEncoderVelocity());
                put("Right Encoder Position (Ft)", getRightEncoderPosition());

                put("Robot Heading (degrees)", getGyroHeadingDegrees());
                put("NavX X Accel", (double) navX.getWorldLinearAccelX());
                put("NavX Y Accel", (double) navX.getWorldLinearAccelY());
                put("NavX Z Accel", (double) navX.getWorldLinearAccelZ());
                put("NavX Yaw", getGyroYawDegrees());
                put("NavX Angle", getGyroHeadingDegrees());
                put("NavX Fused Heading", getGyroFusedHeadingDegrees());
                put("NavX TurnRate dg per s", navX.getRate());
            }
        };
        Enumeration<String> doubleValsKeys = doubleVals.keys();
        for (String key : Collections.list(doubleValsKeys)) {
            double val = doubleVals.get(key);
            SmartDashboard.putNumber(key, val);
        }
    }

    public void percentDrive(double leftPercentage, double rightPercentage) {
        leftTalonLead.setSpeed(leftPercentage * PERCENT_DRIVE_MAX_SPEED);
        rightTalonLead.setSpeed(rightPercentage * PERCENT_DRIVE_MAX_SPEED);
    }

    public void accelDrive(double leftTargetSpeed, double rightTargetSpeed) {
        leftTalonLead.accelToward(leftTargetSpeed, MAX_ACCEL);
        rightTalonLead.accelToward(rightTargetSpeed, MAX_ACCEL);
    }

    public void arcadeDrive(double velocity, double turning) {
        // Convert turning and speed to left right encoder velocity
        double leftMotorOutput;
        double rightMotorOutput;

        double maxInput = Math.copySign(Math.max(Math.abs(velocity), Math.abs(turning)), velocity);
        if (velocity >= 0.0) {
            // First quadrant, else second quadrant
            if (turning >= 0.0) {
                leftMotorOutput = maxInput;
                rightMotorOutput = velocity - turning;
            } else {
                leftMotorOutput = velocity + turning;
                rightMotorOutput = maxInput;
            }
        } else {
            // Third quadrant, else fourth quadrant
            if (turning >= 0.0) {
                leftMotorOutput = velocity + turning;
                rightMotorOutput = maxInput;
            } else {
                leftMotorOutput = maxInput;
                rightMotorOutput = velocity - turning;
            }
        }

        // Send to motors
        velocityDrive(leftMotorOutput * MAX_VELOCITY, rightMotorOutput * MAX_VELOCITY);
    }

    public void stop() {
        leftTalonLead.setSpeed(0);
        rightTalonLead.setSpeed(0);
    }

    public void accelStop() {
        accelDrive(0, 0);
    }

    // Sets the motors to ft/sec, uses the onboard motor PID
    public void velocityDrive(double vL, double vR) {
        SmartDashboard.putNumber("Set Velocity Left (Encoder units/100ms)", vL);
        SmartDashboard.putNumber("Set Velocity Right (Encoder units/100ms)", vR);
        // leftTalonLead.selectProfileSlot(VELOCITY_PID_SLOT_ID, 0);
        // rightTalonLead.selectProfileSlot(VELOCITY_PID_SLOT_ID, 0);
        leftTalonLead.setSpeed(vL);
        rightTalonLead.setSpeed(vR);
    }

    public void initAutonomous(Position2D startingPose) {
        // reset encoders
        zeroDriveTrainEncoders();

        m_kinematics.setPose(startingPose);
        // Reset Gyro
        setupGyro(navX, startingPose.getHeadingDegrees());
    }

    /**
     * returns left encoder position
     * 
     * @return left encoder position
     */
    public double getLeftEncoderPosition() {
        // Returns the number of steps, multiply by edges per step to get EPR, divided
        // by the gearbox ratio
        return leftTalonLead.getPosition();
    }

    /**
     * returns right encoder position
     * 
     * @return right encoder position
     */
    public double getRightEncoderPosition() {
        // Returns the number of steps, multiply by edges per step to get EPR, divided
        // by the gearbox ratio
        return rightTalonLead.getPosition();
    }

    /**
     * returns left encoder Velocity in ft/s
     * 
     * @return left encoder Velocity in ft/s
     */
    public double getLeftEncoderVelocity() {
        // Returns the velocity of encoder by claculating the velocity from encoder
        // units of click/100ms to ft/s
        return leftTalonLead.getSpeed();
    }

    /**
     * returns right encoder Velocity in ft/s
     * 
     * @return right encoder Velocity in ft/s
     */
    public double getRightEncoderVelocity() {
        // Returns the velocity of encoder by claculating the velocity from encoder
        // units of click/100ms to ft/s
        return rightTalonLead.getSpeed();
    }

    /**
     * returns robot Velocity in ft/s
     * 
     * @return robot Velocity in ft/s
     */
    public double getRobotVelocity() {
        // Returns the velocity of the robot by taking the averga of the velcity on both
        // sides of the robor
        return (getLeftEncoderVelocity() + getRightEncoderVelocity()) / 2.0d;
    }

    /**
     * resets the drive train encoders to 0
     */
    private void zeroDriveTrainEncoders() {
        leftTalonLead.setPosition(0);
        rightTalonLead.setPosition(0);
    }

    public double getGyroFusedHeadingDegrees() {
        return (navX.getFusedHeading() * -1.0d);
    }

    public double getGyroYawDegrees() {
        return (navX.getYaw() * -1.0d);
    }

    public double getGyroHeadingDegrees() {
        return (navX.getAngle() * -1.0d);
    }

    public void setupGyro(AHRS gyro, double startingAngleDegrees) {

        System.out.println("Calibrating gyroscope.");

        gyro.enableBoardlevelYawReset(true);
        gyro.reset();
        gyro.calibrate();

        // Wait for gyro to calibrate ~1 - 10 seconds
        while (gyro.isCalibrating()) {
        }

        // Set's the starting angle to the given angle
        gyro.setAngleAdjustment(startingAngleDegrees);

        System.out.println("Calibrating gyroscope done.");
    }

    public void resetKinematics() {
        setupGyro(navX, 0.0d);
        zeroDriveTrainEncoders();
    }

    public void resetGyro(double headingDegrees) {
        setupGyro(navX, headingDegrees);
    }

    // rotates robot according to give degress using arc length formula
    public void rotateDegrees(double angle) {
        double radians = Math.toRadians(angle);
        double arcLength = (radians * (TRACK_WIDTH_FEET / 2.0));
        double leftEncoderPosition = leftTalonLead.getPosition();
        double rightEncoderPosition = rightTalonLead.getPosition();
        positionControl(leftEncoderPosition - arcLength, rightEncoderPosition + arcLength);
    }

    // sets left and right talons to given parameters
    public void positionControl(double posL, double posR) {
        // leftTalonLead.selectProfileSlot(POSITION_PID_SLOT_ID, 0);
        // rightTalonLead.selectProfileSlot(POSITION_PID_SLOT_ID, 0);

        leftTalonLead.moveTo(posL);
        rightTalonLead.moveTo(posR);
    }

    // public double getMotorError(){
    // return leftTalonLead.getClosedLoopError(0);
    // }

    public static double getTrackWidthFeet() {
        return TRACK_WIDTH_FEET;
    }
}
